---
# Get Environment details
- set_fact:
    dwx_endpoint_api: "{{ cdp_endpoint_url }}/dwx/api/v2"

- name: DEBUG - dwx_endpoint_api
  debug:
    msg: "{{ dwx_endpoint_api }}"

- name: Get Environment CRN
  uri:
    url: "{{ dwx_endpoint_api }}/environments"
    method: GET
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: dwx_environments

- name: DEBUG - dwx_environments
  debug:
    msg: "{{ dwx_environments }}"
    
- set_fact:
    dwx_env_crn: "{{ dwx_environments.json | community.general.json_query(query) }}"
  vars:
    query: "clusters[?name == '{{ viz.env_name }}' ].environmentCRN | [0]"

- name: DEBUG - dwx_env_crn
  debug:
    msg: "{{ dwx_env_crn }}"

- set_fact:
    dwx_env_id: "{{ dwx_environments.json | community.general.json_query(query) }}"
  vars:
    query: "clusters[?name == '{{ viz.env_name }}' ].id | [0]"

- name: DEBUG - dwx_env_id
  debug:
    msg: "{{ dwx_env_id }}"

- set_fact:
    dwx_env_status: "{{ dwx_environments.json | community.general.json_query(query) }}"
  vars:
    query: "clusters[?name == '{{ viz.env_name }}' ].status | [0]"

- name: DEBUG - dwx_env_status
  debug:
    msg: "{{ dwx_env_status }}"


# Create Data Viz and get its id
- name: Create Data Viz
  uri:
    url: "{{ dwx_endpoint_api }}/environments/{{ dwx_env_id }}/vizs"
    method: POST
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    body_format: json
    body: "{{ lookup('template', 'create-viz.json') }}"
    status_code: [200, 202]
    return_content: yes
    validate_certs: no
  register: answer_to_register_viz

- set_fact:
    dviz_id: "{{ answer_to_register_viz.json | community.general.json_query(query) }}"
  vars:
    query: "vizId"

- name: DEBUG - dviz_id
  debug:
    msg: "{{ dviz_id }}"

# Check it is up and running
- name: Check data viz is up and running
  uri:
    url: "{{ dwx_endpoint_api }}/environments/{{ dwx_env_id }}/vizs/{{ dviz_id }}"
    method: GET
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: [200, 202]
    return_content: yes
    validate_certs: no
  register: dviz_status
  until: " dviz_status.json.Viz.viz.status == 'Running' "
  retries: 60
  delay: 5


# Add in the config map viz-saml-conf the tow lines; required_admin_groups=["admin_group"] & required_groups=["admin_group"] at the end
- name: Touch config map file
  file:
    path: "/tmp/cf-{{ dviz_id }}"
    state: touch

- name: Get configmap into a file 
  shell: " kubectl get configmap viz-saml-conf -n {{ dviz_id }} -o yaml >> /tmp/cf-{{ dviz_id }} "

- name: Add configmap line for required_admin_groups
  lineinfile:
    path: "/tmp/cf-{{ dviz_id }}"
    insertbefore: '.*ConfigMap.*'
    line: "    required_admin_groups=[\"{{ viz.admin_group }}\"]"
    state: present

- name: Add configmap line for required_groups
  lineinfile:
    path: "/tmp/cf-{{ dviz_id }}"
    insertbefore: '.*ConfigMap.*'
    line: "    required_groups=[\"{{ viz.admin_group }}\"]"
    state: present

- name: Apply new settings added 
  shell: " kubectl apply -f /tmp/cf-{{ dviz_id }} -n {{ dviz_id }} "

# Delete web app pod

- name: Delete viz-webapp-0 pod
  shell: " kubectl delete pod viz-webapp-0 -n {{ dviz_id }} "

