#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
# Get Environment details
- set_fact:
    cml_endpoint_api: "{{ cdp_endpoint_url }}/api/v1/ml"

- name: DEBUG - cml_endpoint_api
  debug:
    msg: "{{ cml_endpoint_api }}"

# Create Workspace
- name: Create CML Workspace
  uri:
    url: "{{ cml_endpoint_api }}/createWorkspace"
    method: POST
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    body_format: json
    body: "{{ lookup('template', 'create_cml.json') }}"
    status_code: [200, 202]
    return_content: yes
    validate_certs: no
  register: answer_to_create_cml

- name: Check CML creation
  uri:
    url: "{{ cml_endpoint_api }}/describeWorkspace"
    method: POST
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    body_format: json
    body: "{{ lookup('template', 'check_cml_activation.json') }}"
    status_code: [200, 202]
    return_content: yes
    validate_certs: no
  register: cml_activation
  until: " cml_activation.json.workspace.instanceStatus == 'installation:finished' "
  retries: 30
  delay: 60

- set_fact: 
    cml_endpoint: "{{ cml_activation.json.workspace.instanceUrl.split('//')[1] }}"

# Prepare root cert

- name: Check rootCA.crt
  stat: 
    path: ~/rootCA.crt
  register: rootca_crt_stat
  when: not workspace.disable_tls

- name: Check rootCA.key
  stat: 
    path: ~/rootCA.key
  register: rootca_key_stat
  when: not workspace.disable_tls

- name: Generates rootCA if needed
  shell: |
    openssl genrsa -out ~/rootCA.key 4096
    openssl req -x509 -new -nodes -key ~/rootCA.key -sha256 -days 1024 -out ~/rootCA.crt -subj "/C=FR/ST=Paris/L=Paris/O=Cloudera/OU=PS/CN=CML-{{ workspace.env_name }}"
  when: not rootca_key_stat.stat.exists and not rootca_crt_stat.stat.exists and not workspace.disable_tls

- name: Fetch rootCA locally to add it to your browser
  fetch: 
    src: ~/rootCA.crt
    dest: "~/cluster-{{ cluster_name }}/rootCA-pvc-{{ workspace.env_name }}.pem"
    flat: yes
  when: not workspace.disable_tls

- name: Template openssl-ext.conf
  template: 
    src: openssl-ext.conf
    dest: "~/openssl-ext-{{ cml_endpoint }}.conf"
  when: not workspace.disable_tls


# Prepare cert for endpoint

- name: Generate key and csr for endpoint
  shell: "openssl req -nodes -newkey rsa:2048 -keyout endpoint-{{ cml_endpoint }}.key -out endpoint-{{ cml_endpoint }}.csr -subj \"/C=FR/ST=Paris/L=Paris/O=Cloudera/OU=PS/CN={{ cml_endpoint }}\" "
  when: not workspace.disable_tls

- name: Sign it using rootCA
  shell: "openssl x509 -req -extfile openssl-ext-{{ cml_endpoint }}.conf -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -days 365 -sha256 -in endpoint-{{ cml_endpoint }}.csr -out endpoint-{{ cml_endpoint }}.crt"
  when: not workspace.disable_tls

- name: Upload cert file
  shell: "kubectl create secret tls cml-tls-secret --cert=endpoint-{{ cml_endpoint }}.crt --key=endpoint-{{ cml_endpoint }}.key -o yaml --dry-run | kubectl -n {{ workspace.name }} create -f - "
  when: not workspace.disable_tls

- name: Fetch cert file locally to add it to your browser
  fetch: 
    src: "~/endpoint-{{ cml_endpoint }}.crt"
    dest: "~/cluster-{{ cluster_name }}/endpoint-{{ cml_endpoint }}.crt"
    flat: yes
  when: not workspace.disable_tls
  
